#!/usr/bin/env python3

import os
import sys
import re

import restructuredtext_lint

import pastel

MAKE_ERROR = "<error>ERROR: Use `make` instead of scripts manually.</error>"

# Ignore messages generated by Sphinx-specific RST syntax
SPHINX_ERROR_IGNORE = [
    r'directive type "toctree"',
    r'entry for "doc"',
    r'entry for "download"',
    r'entry for "ref"',
    r'entry for "toctree"',
    r'text role "doc"',
    r'text role "download"',
    r'text role "ref"',
]

# Ignore messages we don't care about in general
ERROR_IGNORE = ["is not referenced"]


def main():

    printer = pastel.Pastel(True)
    printer.add_style("file", "light_blue")
    printer.add_style("info", "default")
    printer.add_style("warning", "yellow")
    printer.add_style("error", "red")
    printer.add_style("severe", "red")

    if not os.environ.get("ROOT"):
        print(printer.colorize(MAKE_ERROR))
        sys.exit(1)

    filename = sys.argv[1]

    if not filename:
        sys.exit(0)

    errors = restructuredtext_lint.lint_file(filename)

    error_regexes = ERROR_IGNORE
    error_regexes.extend(SPHINX_ERROR_IGNORE)

    outputs = []

    for error in errors:
        message = error.message.strip()
        sphinx_error = False
        for regex in error_regexes:
            if re.search(regex, message):
                sphinx_error = True
        if sphinx_error:
            continue
        line = error.line
        type = error.type
        tag = type.lower()
        file = f"<file>{filename}:{line}</file>\n"
        output = f"{file}<{tag}>{type}: {message}</{tag}>"
        outputs.append(output)

    if outputs:
        for output in outputs:
            print(printer.colorize(output))
        sys.exit(1)


if __name__ == "__main__":
    main()
