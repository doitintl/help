name: Push

# This workflow will run for every push to the `staging` branch. It will also
# run for every push on a PR.
on:
  pull_request:
  push:
    branches:
      - staging
      - latest

jobs:
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bottle-garden/devcontainer:main
    steps:
      - uses: actions/checkout@v2
      # Set up the devcontainer
      - run: make --directory .devcontainer install
      # Make the lint target
      - run: make lint

      # DoiT tooling
      # -----------------------------------------------------------------------
      # Install the latest version of the DoiT DocOps Utilities from the Python
      # Package Index (PyPI). See <https://github.com/doitintl/docops-utils>
      # for more details.
      # - run: pipx install doitintl-docops
      # Run a basic glossary terms analysis. This feature is still in active
      # development, so the output from this command is only informational
      # purposes only. This step should never fail.
      # TODO: This fails with an SQLite error (probably a Python version issue)
      # - run: docops-gloss-terms --quiet src

      # Third-party tooling
      # -----------------------------------------------------------------------
      # The rest of the steps in this job are performed by third-party actions.
      # If the functionality they provide proves useful, the tooling will be
      # integrated directly into the the DoiT DevOps containers.
      #
      # Bringing the functionality in-house will give us the ability to
      # configure shared defaults, give us more options for customization in
      # general, and allow us to use the output for QA automation (e.g.,
      # creating issues when changes are landed that change the lint status
      # from passing to failing).

      # Runs EditorConfig (https://editorconfig.org/) on the source files,
      # reading config from the the `.editorconfig` file at the root of the
      # repository.
      - uses: kasperhesthaven/setup-editorconfig-checker@v1.2.0
        if: always()
      - run: editorconfig-checker

      # Runs Prettier (https://prettier.io/) on the source files, reading
      # config from the `.prettierrc.yaml` and `.prettierignore` files at the
      # root of the repository.
      #
      # Note: Prettier has been configured to ignore Markdown files, which are
      # handled separately.
      - uses: actionsx/prettier@v2
        if: always()
        with:
          args: --check .

      # Runs cSpell <https://github.com/streetsidesoftware/cspell> on the
      # source files, reading configuration from a file named `cspell.json` at
      # the root of the repository (if it exists).
      - uses: zwaldowski/cspell-action@v1
        if: always()
        with:
          config: .cspell.json
          paths: src/**/*
          unique: true

      # This is third-party action that uses tries to detect non-inclusive
      # language. See <https://github.com/get-woke/woke> for more information.
      - uses: get-woke/woke-action@v0
        if: always()
        with:
          workdir: src
          fail-on-error: true
          github-token: ${{ github.token }}

      # This is a third party action that uses markdownlint
      # <https://github.com/markdownlint/markdownlint> to check for syntax and
      # stylistic errors in any Markdown files present. This action will read
      # from a file named `.markdownlint.yaml` at the root of the repository.
      - uses: nosborn/github-action-markdown-cli@v2.0.0
        if: always()
        with:
          files: .

      # This is a third-party action that uses markdown-link-check
      # <https://github.com/tcort/markdown-link-check> to scan for broken links
      # in any Markdown files present. This action can be configured with a
      # file named `.markdown-link-check.json` at the root of the repository.
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        if: always()
        with:
          config-file: .mlc.json
          folder-path: contribute
          file-path: README.md
          file-extension: .md
          max-depth: -1
          base-branch: main
          use-verbose-mode: yes
          use-quiet-mode: yes
          check-modified-files-only: no

      # This is a third-party action that updates Slack with the outcome status
      # of this job.
      - uses: ravsamhq/notify-slack-action@v1
        if: always() && github.event_name != 'pull_request'
        env:
          # TODO: Figure out how to use the name of the job without copying it
          STATUS: QA checks <{run_url}|{status_message}>
          COMMIT: for commit `<{commit_url}|{commit_sha}>`
          BRANCH: on branch `{branch}`
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          notification_title: ''
          message_format: ${{ env.STATUS }} ${{ env.COMMIT }} ${{ env.BRANCH }}
          footer: <{repo_url}|{repo}>
          notify_when: success,warning,failure
